/*
Deployment script for DB_A4753D_university

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DB_A4753D_university"
:setvar DefaultFilePrefix "DB_A4753D_university"
:setvar DefaultDataPath "H:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\Data\"
:setvar DefaultLogPath "H:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\Data\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[course]...';


GO
CREATE TABLE [dbo].[course] (
    [Id]       INT           NOT NULL,
    [Name]     NVARCHAR (10) NOT NULL,
    [Birthday] DATE          NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[student_subject]...';


GO
CREATE TABLE [dbo].[student_subject] (
    [Id]         INT NOT NULL,
    [Student_Id] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[students]...';


GO
CREATE TABLE [dbo].[students] (
    [Id]         INT           NOT NULL,
    [FirstName]  NVARCHAR (20) NOT NULL,
    [LastName]   NVARCHAR (20) NOT NULL,
    [MiddleName] NVARCHAR (20) NOT NULL,
    [Birthday]   DATETIME      NOT NULL,
    [Address]    NVARCHAR (30) NULL,
    [Phone]      VARCHAR (15)  NULL,
    [Course_Id]  INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[subjects]...';


GO
CREATE TABLE [dbo].[subjects] (
    [Id]   INT           NOT NULL,
    [Name] NVARCHAR (15) NOT NULL,
    PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[teacher_subject]...';


GO
CREATE TABLE [dbo].[teacher_subject] (
    [Id]         INT NOT NULL,
    [Teacher_id] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[teachers]...';


GO
CREATE TABLE [dbo].[teachers] (
    [Id]         INT           NOT NULL,
    [FirstName]  NVARCHAR (20) NOT NULL,
    [LastName]   NVARCHAR (20) NOT NULL,
    [MiddleName] NVARCHAR (20) NOT NULL,
    [Birthday]   DATE          NOT NULL,
    [Address]    NVARCHAR (30) NULL,
    [Phone]      VARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[users]...';


GO
CREATE TABLE [dbo].[users] (
    [Id]       INT           IDENTITY (1, 1) NOT NULL,
    [UserName] NVARCHAR (15) NOT NULL,
    [Password] NVARCHAR (15) NOT NULL,
    [Faculty]  NVARCHAR (15) NULL,
    [Age]      INT           NULL,
    [Salary]   INT           NULL,
    PRIMARY KEY CLUSTERED ([UserName] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[student_subject]...';


GO
ALTER TABLE [dbo].[student_subject] WITH NOCHECK
    ADD FOREIGN KEY ([Student_Id]) REFERENCES [dbo].[students] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[students]...';


GO
ALTER TABLE [dbo].[students] WITH NOCHECK
    ADD FOREIGN KEY ([Course_Id]) REFERENCES [dbo].[course] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[teacher_subject]...';


GO
ALTER TABLE [dbo].[teacher_subject] WITH NOCHECK
    ADD FOREIGN KEY ([Teacher_id]) REFERENCES [dbo].[teachers] ([Id]);


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.student_subject'), OBJECT_ID(N'dbo.students'), OBJECT_ID(N'dbo.teacher_subject'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
